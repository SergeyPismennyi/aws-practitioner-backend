service: product-service

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: personalAccount
  region: eu-west-1
  stage: dev
  environment:
    PRODUCTS_TABLE_NAME: !Ref DynamoDBProducts
    STOCKS_TABLE_NAME: !Ref DynamoDBStocks
    SNS_TOPIC: !Ref SNSCreateProductTopic
    REGION: eu-west-1
  iam:
    role: DynamoDBPolicy

plugins:
  - serverless-auto-swagger
  - serverless-offline

custom:
  autoswagger:
    apiType: http
    basePath: /dev
    typefiles: [./../node_modules/@aws-practitioner/types/dist/product-service/product.d.ts]

functions:
  getProductsList:
    handler: dist/handlers/getProductsList.getProductsList
    events:
      - http:
          path: /products
          method: GET
          responses:
            200:
              bodyType: IProductWithStockList
            404:
              description: Products not found

  getProductsById:
    handler: dist/handlers/getProductsById.getProductsById
    events:
      - http:
          path: /products/{id}
          method: GET
          responses:
            200:
              bodyType: IProductWithStock
            404:
              description: Product not found

  createProduct:
    handler: dist/handlers/createProduct.createProduct
    events:
      - http:
          path: /products
          method: POST
          bodyType: ICreateProductRequest
          responses:
            200:
              bodyType: ICreateProductResponse
            400:
              description: Params validation error

  catalogBatchProcess:
    handler: dist/handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          maximumBatchingWindow: 60
          arn:
            Fn::GetAtt:
              - ProductsQueue
              - Arn

resources:
  Resources:
    DynamoDBPolicy:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DynamoDBLambdasAccessRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonSQSFullAccess
          - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        Policies:
          - PolicyName: DynamoDBLambdasAccessPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

    DynamoDBProducts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DynamoDBStocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ProductsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ProductsQueue

    SNSCreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic

    SNSCreateProductSuccessSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: aws_create_product_success@gmail.com
        TopicArn: !Ref SNSCreateProductTopic
        FilterPolicy:
          status:
            - success

    SNSCreateProductErrorSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: aws_create_product_error@gmail.com
        TopicArn: !Ref SNSCreateProductTopic
        FilterPolicy:
          status:
            - error
